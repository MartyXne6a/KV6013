<?php
session_start();
// Check if the user has been signed in
if (!isset($_SESSION['access_token']) || !$_SESSION['access_token']) {
    // If the user is not authorized, redirect to authenticate.php
    $redirect_uri = 'http://' . $_SERVER['HTTP_HOST'] . '/src/php/authenticate.php';
    header('Location: ' . filter_var($redirect_uri, FILTER_SANITIZE_URL));
    exit();
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <!--tell mobile browsers to make the size of the layout viewport equal to the device width or the size of the screen-->
    <meta name="viewport" content="width=device-width">
    <!--to fix this modify the meta element that you just added so that it is as follows-->
    <meta name="viewport" content="width=device-width,maximum-scale=1.0">
    <title>Living Planet</title>
    <link rel="stylesheet" type="text/css" href="../../assets/css/style.css">
</head>
<body>
<header>
    <div class="logo">
        <a href="../../index.html"><img src="../../assets/img/logo/logoLP2.png" alt="logo"></a>
    </div>
    <nav>
        <ul>
            <li><a href="../../index.html">Home</a></li>
            <li><a href="../../about.html">About</a></li>
            <li><a href="authenticate.php?logout">Logout</a></li>
        </ul>
    </nav>
</header>
<main>
    <div class="row">
        <img src="../../assets/img/net.jpeg" alt="network">
    </div>
    <div class="oauth">
        <p>OAuth (Open Authorization) is an open standard for access delegation used over the Internet. Users are allowed to grant third-parties access to limited resources on their
            servers without exposing their own credentials (sensitive information such as username and password). OAuth provides secure and delegated access to the information while
            maintaining control and security over user credentials.</p>

        <p>When an user attempts to use a third-party application that requires access to limited resources, the client application requires user authentication before redirecting them to the OAuth service.
        The user authorises or restricts access to their resources via a prompt provided by the OAuth server.
        Once the user agreed to grant permission, the OAuth server redirects them to the client application providing an authorisation code.
        The client application sends to the OAuth server a request to exchange the provided authorisation code with an access token. The OAuth provider issues the access token to the client application.
            After the validation of the access token, the client application can have granted access to the resource server. </p>

        <p>OAuth is widely used by major companies like Google, Facebook, Twitter, and several other providers to permit third-party applications to access user data.
            The most stable version is OAuth 2.0, which integrates significant improvements in terms of ease of use and security compared to the previous OAuth 1.0 version.</p>

        <h3>Application Requirements</h3>
        <p>The Living Planet HQ web application requires user authentication for accessing this web page contents. To facilitate this process, OAuth 2.0 provided by Google has been implemented.
            A Google developer account is required for enabling the OAuth service within the Google API.
            This involves setting up a project in the Google API and creating OAuth Client credentials.
            The OAuth Client ID and secret generated are used by the application to authenticate the user.
        </p>
        <p>Google API requires a public top-level domain (authorised) for the URIs used for sending requests from browser and server. This means the redirect URIs must end with a valid top-level
            domain (such as .com, .org, etc) and cannot be just an IP address.</p>
        <p>For this project, <a href="https://www.duckdns.org/domains">Duck DNS</a>, a Dynamic DNS service, has been used to map a valid domain name to the dynamic IP address generated by the Google VM which hosts the web application. Duck DNS provides a way to update DNS records automatically,
            ensuring that the domain names always point to the current IP address of the VM, even if changes.</p>
    </div>
</main>
<footer>
    &copy; 2024 Living Planet. All rights reserved.
</footer>
</body>
</html>
